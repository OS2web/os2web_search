<?php

use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\search_api\Query\QueryInterface;
use Drupal\search_api\Query\ResultSetInterface;
use Solarium\QueryType\Select\Result\Result;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Updates placeholder.
 */
function os2web_search_form_views_exposed_form_alter(array &$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  switch ($form['#id']) {
    case 'views-exposed-form-os2web-search-os2web-search-page':
      // Setting placeholder and adding class.
      $form['sq']['#attributes']['placeholder'] = $form['#info']['filter-search_api_fulltext']['label'];
      $form['sq']['#attributes']['class'][] = 'search-input__input';

      // Cleaning the filter labels.
      unset($form['#info']['filter-search_api_fulltext']['label']);

      // Removing text value and adding class.
      $form['actions']['submit']['#value'] = '';
      $form['actions']['submit']['#attributes']['class'][] = 'search-input__button';

      break;
  }
}

/**
 * Implements hook_search_api_solr_search_results_alter().
 *
 * If this is exclusive search and we have only one result, perfoming redirect
 * to a selected node.
 */
function os2web_search_search_api_solr_search_results_alter(ResultSetInterface $result_set, QueryInterface $query, Result $result) {
  if ($query->getOption('solr_param_exclusive') == 'true' && $result->count() == 1) {
    $resultItems = $result_set->getResultItems();

    /** @var \Drupal\search_api\Item\Item $item */
    $item = array_pop($resultItems);

    // Item is stored like entity:node/2:da
    $itemId = $item->getId();
    preg_match('/entity:node\/(\d*):.*/', $itemId, $matches);
    $nodeId = $matches[1];

    $node = Node::load($nodeId);

    // Performing redirect to this node.
    $response = new RedirectResponse($node->toUrl()->toString());
    $request = \Drupal::request();
    // Save the session so things like messages get saved.
    $request->getSession()->save();
    $response->prepare($request);
    // Make sure to trigger kernel events.
    \Drupal::service('kernel')->terminate($request, $response);
    $response->send();
  }
}
